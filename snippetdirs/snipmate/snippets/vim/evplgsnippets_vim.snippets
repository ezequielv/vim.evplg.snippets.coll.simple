# prev: # NOTE: this file was named 'vim_evplgsnippets.snippets', but ultisnips did not find it.
# prev: #  NOTE: so now the file is simply 'vim.snippets'
# NOTE: used features from the snipmate parser "version 1":
#  * 'version 1'  (ultisnips does not recognise it, and the parser returns an error on that line)
#  * 'snippet!' (parser error, see above entry)
# NOTE: features not known to work on ultisnips:
#  * '${VISUAL}'
# TODO: create an ultisnips "port" of every snippet in this file
#  IDEA: snippets that would work on both parsers to a unified 'snipmate-compat' file, where the version is not assumed
#   IDEA: for snipmate (and other compatible plugins?), we could detect the 'byparserversion/v1' (sub)directory, and add it to '&runtimepath' if 'g:snipMate.snippet_version == 1' (check ':h SnipMate-options', ':h SnipMate-parser-versions'))
#   IDEA: for ultisnips, we could detect the subdirectory 'byparserversion/lcd' (or 'compat') ('lcd': "lowest common denominator")
version 1

#+ snippet fun "function (long keywords)"
#+ 	function! ${1:`evplg#snippets#scope#vim#get_default_function_prefix()`}${2:function_name}(${3})
#+ 		${0}
#+ 	endfunction
# TODO: try to remove the space between ':' and the '`', so that we don't make it easy to create the wrong code
snippet fun function (long keywords)
	function!${1: `evplg#snippets#scope#vim#get_default_function_prefix()`}${2:function_name}(${3})
		${0}
	endfunction

snippet fu function (short keywords)
	fu!${1: `evplg#snippets#scope#vim#get_default_function_prefix()`}${2:function_name}(${3})
		${0}
	endf

snippet! f function (alias)
	function

# FIXME: ultisnips does not seem to cope with:
#  * 'snippet!': the following line yields an error:
#    * snippet! f "function (smart)"
#  * 'version':  the following line yields an error:
#    * version 1
#+ snippet! f "function (smart)"
#+ 	`evplg#snippets#scope#vim#keyword('function')`! ${1:`evplg#snippets#scope#vim#get_default_function_prefix()`}${2:function_name}(${3})
#+ 		${0}
#+ 	`evplg#snippets#scope#vim#keyword('endfunction')`
# prev: # autoconversion-snippet-out-ids: snipmate-compat ultisnips
#+? # autoconversion-snippet-out-ids: ultisnips.snipmate
# autoconversion-snippet-out-ids: ultisnips
# autoconversion-snippet-fmt-ultisnips-flags: b
snippet! function function (smart)
	`evplg#snippets#scope#vim#keyword('function')`!${1: `evplg#snippets#scope#vim#get_default_function_prefix()`}${2:function_name}(${3})
		${0}
	`evplg#snippets#scope#vim#keyword('endfunction')`

snippet! t try ... catch statement (alias)
	try

snippet! try try ... catch statement (smart)
	`evplg#snippets#scope#vim#keyword('try')`
		${1:${VISUAL}}
	`evplg#snippets#scope#vim#keyword('catch')` ${2}
		${0}
	`evplg#snippets#scope#vim#keyword('endtry')`

# vim keyboard macro (ie., put it in reg 'a', for example) to make a 'long keyword' version out of a "smart" one
# v1: {V}y}p{:.,/^$/ s/\v`evplg#snippets#scope#vim#keyword\(\s*'([^']+)'.{-}`/\1/g | nohlsearch
# v2: {V}y}p{0EEaLA (long keywords)0:.,/^$/ s/\v`evplg#snippets#scope#vim#keyword\(\s*'([^']+)'.{-}`/\1/g | nohlsearch
# v3: {V}y}p{0EEaL$F(DA(long keywords)0:.,/^$/ s/\v`evplg#snippets#scope#vim#keyword\(\s*'([^']+)'.{-}`/\1/g | nohlsearch

# prev: snippet! f for ... in loop (alias)
# prev: 	for

snippet! for for ... in loop (smart)
	`evplg#snippets#scope#vim#keyword('for')` ${1} in ${2}
		${0:${VISUAL}}
	`evplg#snippets#scope#vim#keyword('endfor')`

snippet! forkv for [key, value] in loop (smart)
	`evplg#snippets#scope#vim#keyword('for')` [${1},${2}] in items(${3})
		${0}
		`evplg#snippets#scope#vim#keyword('unlet')` $1 $2
	`evplg#snippets#scope#vim#keyword('endfor')`

snippet! w while loop (alias)
	while

snippet! wh while loop (alias)
	while

snippet! while while loop (smart)
	`evplg#snippets#scope#vim#keyword('while')` ${1}
		${0:${VISUAL}}
	`evplg#snippets#scope#vim#keyword('endwhile')`

snippet! if if statement (smart)
	`evplg#snippets#scope#vim#keyword('if')` ${1}
		${0:${VISUAL}}
	`evplg#snippets#scope#vim#keyword('endif')`

snippet! ife if ... else statement (smart)
	`evplg#snippets#scope#vim#keyword('if')` ${1}
		${2:${VISUAL}}
	`evplg#snippets#scope#vim#keyword('else')`
		${0}
	`evplg#snippets#scope#vim#keyword('endif')`

# single keywords:
# note: some of them will have a trailing space to stop the autocompletion (if
# any) to try to autocomplete the identifier.

snippet! exe execute command (smart)
	`evplg#snippets#scope#vim#keyword('execute')` ${0}

# fixes:

#? # NOTE: maybe use vim script (ex) code to emulate pressing <tab>
#+ IDEA: install (in a 'post' script): a 'inoremap' to '<backslash><tab>' to expand to the same, only if the key to expand is indeed <tab>
#   TODO: implement this, as I've tested the following code and it works:
#     :inoremap \<Tab> <C-r>=( feedkeys("\\\t", "in") ? '' : '')<cr>
#     (to avoid repeating the null string, if that's somehow undesirable, we can force the ternary conditional operator to always evaluate one side (truthy, in our case))
#     :inoremap \<Tab> <C-r>=( feedkeys("\\\t", "in") || 1 ? '' : 0)<cr>
#    NOTE: it might also be available through the ':inoremap <expr>', but I'm not sure how backwards-compatible that is
#    NOTE: do this (for now), only when snipmate is active, and even then we'd need to make sure that we would only "patch" this behaviour for specific 'filetype's, when certain variables are set, etc.
#    NOTE: *important* [2022.12.23 21:11:21] editing a new file without this "fix snippet" and without the "inoremap" above seemed to work as I'd expect it to (correctly), so I don't know what's happening now
#? IDEA: try to make snipmate ignore the <backslash><tab>, so the (main) editor (or another plugin) gets the key sequence instead.
#+ snippet! \ "Fix: backslash-tab expanded to just that"
#+ prev: v1:	\\{there_was_a_trailing_tab_but_got_deleted_by_vim_because_of_cfg_from_editorconfig}
#+ prev: v2:	`evplg#snippets#baselib#valcommon#getesc('\\') . evplg#snippets#baselib#valcommon#getesc('t')`
#+ prev: v3: snippet! \ "Fix: backslash-tab expanded to just that"
#+ prev: v3: 	\\`evplg#snippets#baselib#valcommon#getesc('t')`

